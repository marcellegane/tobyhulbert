{"version":3,"file":"static/webpack/static/development/pages/index.js.24c6368b7934667d0a93.hot-update.js","sources":["webpack:///./components/NavigationLink/index.js"],"sourcesContent":["import React from 'react'\nimport gsap from 'gsap/dist/gsap'\nimport { ScrollToPlugin } from 'gsap/dist/ScrollToPlugin.js'\nimport { SineWave } from '../svgs/SineWave'\nimport { SquareWave } from '../svgs/SquareWave'\nimport { TriangleWave } from '../svgs/TriangleWave'\nimport {\n  NavigationLink,\n  NavigationLinkText,\n  NavigationLinkUnderline,\n  NavigationLinkMain,\n} from './index.style'\nimport { TextMask } from '../TextMask'\n\ngsap.registerPlugin(ScrollToPlugin)\n\nclass ThisNavigationLink extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.svgPath = null\n    this.isRepeating = true\n    this.tl = gsap.timeline({\n      repeat: -1,\n      paused: true,\n      defaults: { duration: 0.5, ease: 'none' },\n      onRepeat: () => {\n        if (!this.isRepeating) {\n          this.tl.pause()\n        }\n      },\n    })\n\n    this.handleMouseEnter = this.handleMouseEnter.bind(this)\n    this.handleMouseLeave = this.handleMouseLeave.bind(this)\n    this.handleClick = this.handleClick.bind(this)\n  }\n\n  componentDidMount() {\n    const pathLength = this.svgPath.getTotalLength()\n\n    gsap.set(this.svgPath, {\n      opacity: 1,\n      strokeDasharray: pathLength,\n      strokeDashoffset: 0,\n    })\n\n    this.tl\n      .fromTo(\n        this.svgPath,\n        { strokeDashoffset: 0 },\n        {\n          strokeDashoffset: -pathLength,\n        }\n      )\n      .fromTo(\n        this.svgPath,\n        { strokeDashoffset: pathLength },\n        { strokeDashoffset: 0 }\n      )\n\n    // Page load animations\n    gsap.fromTo(\n      this.svgPath,\n      { strokeDashoffset: pathLength },\n      { strokeDashoffset: 0, ease: 'power2.inOut', duration: 0.7 }\n    )\n  }\n\n  handleMouseEnter() {\n    this.isRepeating = true\n    this.tl.play()\n  }\n\n  handleMouseLeave() {\n    this.isRepeating = false\n  }\n\n  handleClick(e) {\n    const { href, menuIsOpen, setMenuIsOpen } = this.props\n    e.preventDefault()\n\n    if (menuIsOpen) {\n      setMenuIsOpen(false)\n    }\n\n    gsap.to(window, {\n      duration: 0.8,\n      scrollTo: { y: href, offsetY: 32 },\n      ease: 'power3.out',\n    })\n  }\n\n  render() {\n    const { showText, href, text, width, svg, svgWidth, svgHeight } = this.props\n\n    return (\n      <NavigationLink\n        {...this.props}\n        onMouseEnter={this.handleMouseEnter}\n        onMouseLeave={this.handleMouseLeave}\n        onClick={this.handleClick}\n      >\n        <NavigationLinkMain>\n          <TextMask show={showText}>\n            <NavigationLinkText>{text}</NavigationLinkText>\n          </TextMask>\n          <NavigationLinkUnderline\n            width={width}\n            svgWidth={svgWidth}\n            svgHeight={svgHeight}\n          >\n            {svg === 'sine' && (\n              <>\n                <SineWave ref={path => (this.svgPath = path)} />\n              </>\n            )}\n\n            {svg === 'square' && (\n              <>\n                <SquareWave ref={path => (this.svgPath = path)} />\n              </>\n            )}\n\n            {svg === 'triangle' && (\n              <>\n                <TriangleWave ref={path => (this.svgPath = path)} />\n              </>\n            )}\n          </NavigationLinkUnderline>\n        </NavigationLinkMain>\n      </NavigationLink>\n    )\n  }\n}\n\nexport { ThisNavigationLink as NavigationLink }\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAEA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AARA;AAWA;AACA;AACA;AAlBA;AAmBA;AACA;;;AACA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAMA;AAGA;AAAA;AAEA;AADA;AAMA;AAAA;AACA;AAAA;AACA;AAGA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;;;AAEA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAHA;AAKA;;;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAGA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;;;;AArHA;AACA;;;;;A","sourceRoot":""}